class IterationDecorator < ApplicationDecorator
  decorates :iteration
#  allows [:iteration_number, :start_on]

# Accessing Helpers
#   You can access any helper via a proxy
#
#   Normal Usage: helpers.number_to_currency(2)
#   Abbreviated : h.number_to_currency(2)
#
#   Or, optionally enable "lazy helpers" by calling this method:
#     lazy_helpers
#   Then use the helpers with no proxy:
#     number_to_currency(2)

# Defining an Interface
#   Control access to the wrapped subject's methods using one of the following:
#
#   To allow only the listed methods (whitelist):
#     allows :method1, :method2
#
#   To allow everything except the listed methods (blacklist):
#     denies :method1, :method2

# Presentation Methods
#   Define your own instance methods, even overriding accessors
#   generated by ActiveRecord:
#
#   def created_at
#     h.content_tag :span, time.strftime("%a %m/%d/%y"),
#                   :class => 'timestamp'
#   end

  def remaining_hours_by_day
    values_by_day { |x| model.remaining_hours_for_day_number(x) }
  end

  def remaining_qa_hours_by_day
    values_by_day { |x| model.remaining_qa_hours_for_day_number(x) }
  end

  def total_hours_by_day
    values_by_day { |x| model.total_hours_for_day_number(x) }
  end

  def completed_hours_by_day
    values_by_day do |x|
      if model.total_hours_for_day_number(x) && model.remaining_hours_for_day_number(x)
        model.total_hours_for_day_number(x) - model.remaining_hours_for_day_number(x)
      else
        return_nil(x)
      end
    end
  end

  def velocity_by_day
    values_by_day(false) { |x| model.velocity_for_day_number(x) }
  end

  def points_delivered_by_day
    values_by_day(false) { |x| model.points_delivered_for_day_number(x) }
  end

  protected

  def values_by_day(format_as_hours=true, &block)
    buf = h.content_tag(:td, "-") + h.content_tag(:td, "-")
    (1..model.calc_day_number).each do |d|
      v = block.call(d)
      buf = buf + h.content_tag(:td, (format_as_hours ? format_hours(v) : v))
    end
    buf
  end

  def format_hours hours
    if hours
      '%.2f' % hours
    else
      "0.0"
    end
  end

  def return_nil x
    nil
  end
end
